handle :
< "file"
< 'file'
cmd > 'file'
cmd > 1file
cmd > *file





#benti lya kadewez ghir les alphabets men ba3d reds
#nefs chay2 f < 1file
#had files : 1file .file *file &file +file #file. khass it creyaw














(typedef struct s_prompt
{
	char			**argv;
	char			*file;
	struct s_prompt	*next;
}	t_prompt;

void	fill_stack(char **arr, t_prompt **pmp)
{
	int	i;

	i = 0;
	while (arr[i])
		ft_add_back(pmp, ft_lstnew(arr[i++]));
}

t_prompt	*ft_lstnew(char *data)
{
	t_prompt *new;
	int i;
	int j;

	i = 0;
	new = malloc(sizeof(t_prompt));
	if (!new)
		return (NULL);
	new->argv = process_token(data, ' ');
	while (new->argv[i])
	{
		new->argv[i] = rm_escape_char(new->argv[i]);
		i++;
	}
	new->file = process_red(data);
	i = 0;
	j = 0;
	while (new->argv[i])
	{
		printf("argv[%d] = %s\n", j++, new->argv[i++]);
	}
	printf("file = %s\n", new->file);
	printf("########################\n");
	return (new->next = NULL, new);
}

t_prompt	*ft_last_node(t_prompt *head)
{
	if (!head)
		return (NULL);
	while (head->next)
		head = head->next;
	return (head);
}

void	ft_add_back(t_prompt **head, t_prompt *new)
{
	t_prompt	*last;

	if (*head == NULL)
	{
		*head = new;
		return ;
	}
	last = ft_last_node(*head);
	last->next = new;
}
) and this is main (void	ft_parser(t_prompt *pmp)
{
	char	**arr;
	char	*input;

	while (1)
	{
		input = readline("minishell> ");
		if (input == NULL)
			break ;
		input = ft_strtrim(input, " ");
		if (check_syntax(input))
			continue ;
		arr = process_token(input, '|');
		fill_stack(arr, &pmp);
		free(input);
	}
}

int	main(int ac, char **av, char **env)
{
	t_prompt	prompt;

	(void)ac;
	(void)av;
	(void)env;
	ft_parser(&prompt);
	return (0);
}) why the program segfault